1.AOP面向切面编程
  在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译和
  运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP（面向对象编程）的延续，是
  软件开发中的一个热点，也是spring框架中的一个重要内容，是函数式编程的一种衍生范型。
  利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提
  高程序的可重用性，同时提高了开发的效率。
  简单的说它就是把我们程序的重复代码抽取出来，在需要执行的时候，使用动态代理的技术，在
  不修改源码的基础上，对我们已有的方法进行增强。

2.AOP的作用和优势
  作用：在程序运行期间，不修改源码对已有方法进行增强
  优势：减少重复代码；提高开发效率；维护方便。

3.AOP的实现方式
  使用动态代理的技术
  在spring中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式。

4.AOP相关术语
  Joinpoint（连接点）：
    所谓连接点，是指那些被拦截到的点。在spring中，这些点指的是方法，因为spring只支持方法
    类型的连接点。
    翻译成大白话就是：例：业务层接口中的方法就是连接点，连接我们的业务和增强方法的那个“点”，
  Pointcut（切入点）：
    所谓切入点是指我们要对哪些Joinpoint进行拦截的定义。
    注：所有的切入点都是连接点，但并不是所有的连接点都是切入点（参考项目day03_eesy_01account中业务层
        接口中的方法test()和BeanFactory类中getAccountService()方法,test()方法没有被增强（没有事务的控制），
	所以test()方法只是连接点）。
  Advice（通知/增强）：所谓通知是指拦截到Joinpoint之后所要做的事情就是通知（例如项目day03_eesy_01account中TransactionManager类中对事
          务控制的方法）。
          通知的类型：前置通知，后置通知，异常通知，最终通知，环绕通知。
	  特别的：day03_eesy_01account项目中整个invoke方法在执行就是环绕通知，
	          在环绕通知中有明确的切入点方法调用。
	  特别的：
	  try {
		    //1.开启事务
		    txManager.beginTransaction();//前置通知
		    //2.执行操作 method：代理对象中当前执行的方法
		    rtValue = method.invoke(accountService, args);
		    //3.提交事务
		    txManager.commit();//后置通知
		    //4.返回结果
		    return rtValue;
               } catch (Exception e) {
		    //5.回滚操作
		    txManager.rollback();//异常通知
		    throw new RuntimeException(e);
               } finally {
		    //6.释放连接
		    txManager.release();//最终通知
	       }
  Introduction（引介）（作为了解内容）：引介是一种特殊的通知，在不修改类代码的前提下，Introduction可以在运行期为类动态的添加一些方法
                                        或Field。
  Target（目标对象，即是被代理对象）：代理的目标对象。例如day03_eesy_01account项目中rtValue = method.invoke(accountService, args)的accountService
                                      就是代理的目标对象。
  Weaving（织入）：是指把增强 应用到目标对象来创建新的代理对象的过程。
                   spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入。
		   例如：day03_eesy_01account项目中原有的service没法实现事务的支持，于是我们用动态代理技术返回了一个代理对象，在
		         返回这个代理对象的时候，我们从中给它加入了事务的支持，整个这个加入事务支持的过程就叫织入。
  Proxy（代理，即是代理对象）：一个类被Aop织入增强后，就产生了一个结果代理类。
  Aspect（切面）：是切入点和通知（引介）的结合。

5.学习spring中的Aop要明确的事情。
  a.开发阶段（我们做的）
    编写核心业务代码（开发主线）：大部分程序员来做，要求熟悉业务逻辑。
    把公用代码抽取出来，制作成通知。（开发阶段最后在做）：Aop编程人员来做。
    在配置文件中，声明切入点与通知间的关系，即切面。：Aop编程人员来做。
  b.运行阶段（spring框架来完成）
    spring框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，
    根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。


      
  